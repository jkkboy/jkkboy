[Cost function in TensorFlow]

X = np.array([1, 2, 3])             # X갑 입력
Y = np.array([1, 2, 3])             # Y값 입력

def cost_func(W, X, Y):             # X,Y에 대한 W값의 cost_function을 구함
  hypothesis = X * W
  return tf.reduce_mean(tf.square(hypothesis - Y))              # 가설에서 실제값을 뺀 모든 값의 평균 계산

W_values = np.linspace(-3, 5, num=15)             # -3에서 5까지 구간을 15개로 쪼갬
cost_values = []

for feed_W in W_values:                           # 위 값의 변화들을 출력
    curr_cost = cost_func(feed_W, X, Y)           # feed_w,x,y의 변화에 따른 cost값을 기록
    cost_values.append(curr_cost)
    print("{:6.3f} | {:10.5f}".format(feed_W, curr_cost))
-3.000 |   74.66667
-2.429 |   54.85714                               # cost는 w값에 따라 줄었다가 늘어나고 있음(gradient)
-1.857 |   38.09524 
-1.286 |   24.38095
-0.714 |   13.71429
-0.143 |    6.09524
 0.429 |    1.52381
 1.000 |    0.00000
 1.571 |    1.52381
 2.143 |    6.09524
 2.714 |   13.71429
 3.286 |   24.38095
 3.857 |   38.09524
 4.429 |   54.85714
 5.000 |   74.66667
 
 
 
[Gradient descent 구현]

tf.set_random_seed(0)  # 다음에 실험할 때도 값을 결과를 얻기위해 초기화

x_data = [1., 2., 3., 4.]
y_data = [1., 3., 5., 7.]

W = tf.Variable(tf.random_normal([1], -100., 100.))           # random_normal 에서 정규분포를 따르는 random number를 1개짜리로 변수를 만들어서 W 정의

for step in range(300):                                       # 300번 실행
    hypothesis = W * X
    cost = tf.reduce_mean(tf.square(hypothesis - Y))          # 코스트 값은 (가설 - 실제값)의 평균의 제곱으로 정의

    alpha = 0.01                                              
    gradient = tf.reduce_mean(tf.multiply(tf.multiply(W, X) - Y, X))      # (함수에 w,x를 대입하고) -y , * x 의 평균
    descent = W - tf.multiply(alpha, gradient)                            # w - (위에 구한 gradient) * alpha
    W.assign(descent)                                                     # 위에 계산한 새로운 W값
    
    if step % 10 == 0:                                                    # 10번에 1번씩 cost값과 w값 출력
        print('{:5} | {:10.4f} | {:10.6f}'.format(
            step, cost.numpy(), W.numpy()[0]))
    0 | 11716.3086 |  48.767971
   10 |  4504.9126 |  30.619968                               # 처음에는 cost값이 매우 크게 나오지만 0으로 수렴
   20 |  1732.1364 |  19.366755                               # w값도 -100 ~ 100 중 임의의 숫자에서 1로 수렴
   30 |   666.0052 |  12.388859
   40 |   256.0785 |   8.062004
   50 |    98.4620 |   5.379007
   60 |    37.8586 |   3.715335
   70 |    14.5566 |   2.683725
   80 |     5.5970 |   2.044044
   90 |     2.1520 |   1.647391
  100 |     0.8275 |   1.401434
  110 |     0.3182 |   1.248922
  120 |     0.1223 |   1.154351
  130 |     0.0470 |   1.095710
  140 |     0.0181 |   1.059348
  150 |     0.0070 |   1.036801
  160 |     0.0027 |   1.022819
  170 |     0.0010 |   1.014150
  180 |     0.0004 |   1.008774
  190 |     0.0002 |   1.005441
  200 |     0.0001 |   1.003374
  210 |     0.0000 |   1.002092
  220 |     0.0000 |   1.001297
  230 |     0.0000 |   1.000804
  240 |     0.0000 |   1.000499
  250 |     0.0000 |   1.000309
  260 |     0.0000 |   1.000192
  270 |     0.0000 |   1.000119
  280 |     0.0000 |   1.000074
  290 |     0.0000 |   1.000046
